typeof(dates_char) # character
dates_char[1];dates_char[length(dates_char)]
dates <- as.yearmon(seq(from=2011+1/12,to=2019+2/12,by=1/12))
dates
X_t <- zoo(data$Indice,order.by=data$Dates)
typeof(data$X_t)
typeof(X_t)
# plot de la série
# chercher une tendance ou saisonalité
par(mfrow = c(1,2))
plot(X_t, xlab = "Années", ylab = "Indice brut de la production industrielle")
acf(X_t, main = "")
# Path Romain
#setwd("/Users/Romain/Documents/Romain/ENSAE 2A 2020-2021/S2/Series temporelles/Projet de series temporelles")
# Path Maxime
setwd("/Users/maximedenizan/Documents/GitHub/Projet-Series-Temporelles")
getwd()
datafile <- "valeurs_mensuelles.csv"
data <- read.csv(datafile, sep=";")
data
# Packages séries temporelles
require(zoo)
require(tseries)
require(fUnitRoots)
typeof(data$Dates) # integer
dates_char <- as.character(data$Dates)
typeof(dates_char) # character
dates_char[1];dates_char[length(dates_char)]
dates <- as.yearmon(seq(from=2011+1/12,to=2019+2/12,by=1/12))
dates
X_t <- zoo(data$Indice,order.by=data$Dates)
typeof(data$X_t)
typeof(X_t)
# plot de la série
# chercher une tendance ou saisonalité
par(mfrow = c(1,2))
plot(X_t, xlab = "Années", ylab = "Indice brut de la production industrielle")
acf(X_t, main = "")
# plot du logarithme de la série
W_t = log(X_t)
plot(W_t, xlab = "Années", ylab = "Logarithme de l'indice")
acf(W_t, main = "")
lt <- lm(W_t ~ dates) # régression du log de la série sur les dates
summary(lt)
dates
dates <- as.yearmon(seq(from=2011+1/12,to=2019+2/12,by=1/12))
dates
dates
lt <- lm(W_t ~ dates) # régression du log de la série sur les dates
summary(lt)
dates
dspread <- diff(X_t,1)
plot(dspread)
adf <- adfTest_valid(dspread,24, type="nc")
X_t <- zoo(data$Indice,order.by=dates)
typeof(data$X_t)
typeof(X_t)
# plot de la série
# chercher une tendance ou saisonalité
par(mfrow = c(1,2))
plot(X_t, xlab = "Années", ylab = "Indice brut de la production industrielle")
acf(X_t, main = "")
X_t <- zoo(data$Indice,order.by=dates)
typeof(data$X_t)
typeof(X_t)
# plot de la série
# chercher une tendance ou saisonalité
par(mfrow = c(1,2))
plot(X_t, xlab = "Années", ylab = "Indice brut de la production industrielle")
acf(X_t, main = "")
dX_t <- diff(X_t, 1)
plot(cbind(X_t,dX_t))
X_t <- zoo(data$Indice,order.by=dates_char)
typeof(data$X_t)
typeof(X_t)
dX_t <- diff(X_t, 1)
plot(cbind(X_t,dX_t))
# plot de la série
# chercher une tendance ou saisonalité
par(mfrow = c(1,2))
plot(X_t, xlab = "Années", ylab = "Indice brut de la production industrielle")
plot(cbind(X_t,dX_t))
X_t <- zoo(data$Indice,order.by=dates)
X_t <- zoo(data$Indice,order.by=dates)
typeof(data$X_t)
typeof(X_t)
dX_t <- diff(X_t, 1)
plot(cbind(X_t,dX_t))
dates <- as.yearmon(seq(from=2011+1/12,to=2019+2/12,by=1/12))
dates
# plot de la série
# chercher une tendance ou saisonalité
par(mfrow = c(1,2))
plot(X_t, xlab = "Années", ylab = "Indice brut de la production industrielle")
acf(X_t, main = "")
#path_romain <- "/Users/Romain/Documents/Romain/ENSAE 2A 2020-2021/S2/Series temporelles/Projet de series temporelles"
path_maxime <- "/Users/maximedenizan/Documents//GitHub/Projet de series temporelles"
#setwd(path_romain)
setwd(path_maxime)
getwd()
datafile <- "valeurs_mensuelles.csv"
data <- read.csv(datafile, sep=";")
data
# Packages séries temporelles
require(zoo)
require(tseries)
require(fUnitRoots)
typeof(data$Dates) # integer
dates_char <- as.character(data$Dates)
typeof(dates_char) # character
dates_char[1];dates_char[length(dates_char)]
dates <- as.yearmon(seq(from=2011+1/12,to=2019+2/12,by=1/12))
X_t <- zoo(data$Indice,order.by=dates)
typeof(data$X_t)
typeof(X_t)
# plot de la série
# chercher une tendance ou saisonalité
par(mfrow = c(1,2))
plot(X_t, xlab = "Années", ylab = "Indice brut de la production industrielle")
acf(X_t, main = "")
lt <- lm(X_t ~ dates) # régression du log de la série sur les dates
summary(lt)
dates
# résidus de la régression du logarithme de la série sur les dates
# série corigée
Z_t <- lt$residuals
acf(Z_t, main = ""); pacf(Z_t, main = "")
# Test racine unitaire sur le logarithme de la série
# Test de Dickey-Fuller
adf <- adfTest(W_t, lag=0, type="ct")
adf
# Test racine unitaire sur le logarithme de la série
# Test de Dickey-Fuller
adf <- adfTest(X_t, lag=0, type="ct")
adf
Qtests <- function(series, k, fitdf=0) {
pvals <- apply(matrix(1:k), 1, FUN=function(l) {
pval <- if (l<=fitdf) NA else Box.test(series, lag=l, type="Ljung-Box", fitdf=fitdf)$p.value
return(c("lag"=l,"pval"=pval))
})
return(t(pvals))
}
Qtests(adf@test$lm$residuals, 24,length(adf@test$lm$coefficients))
adfTest_valid <- function(series,kmax,type){
k <- 0
noautocorr <- 0
while (noautocorr==0) {
cat(paste0("ADF with ",k, " lags: residuals OK? "))
adf <- adfTest(series,lags=k,type=type)
pvals <- Qtests(adf@test$lm$residuals,24,fitdf=length(adf@test$lm$coefficients))[,2]
if (sum(pvals<0.05,na.rm=T) == 0) {
noautocorr <- 1; cat("OK \n")}
else cat("nope \n")
k <- k + 1}
return(adf)
}
# Puis
adf <- adfTest_valid(X_t,24,"ct")
# Puis
adf <- adfTest_valid(X_t,24,"ct")
# Il a fallu considérer 8 retards au test ADF pour supprimer l’autocorrélation des résidus.
adf
dspread <- diff(X_t,1)
plot(dspread)
adf <- adfTest_valid(dspread,24, type="nc")
# Il n’a pas été nécessaire d’inclure des retards dans le test ADF (test DF simple).
adf
# Puis
adf <- adfTest_valid(X_t,24,"ct")
# Il a fallu considérer 8 retards au test ADF pour supprimer l’autocorrélation des résidus.
adf
dspread <- diff(X_t,8)
plot(dspread)
adf <- adfTest_valid(dspread,24, type="nc")
dspread <- diff(X_t,2)
plot(dspread)
adf <- adfTest_valid(dspread,24, type="nc")
# Il n’a pas été nécessaire d’inclure des retards dans le test ADF (test DF simple).
adf
x <- dspread
par(mfrow=c(1,2))
acf(x);pacf(x)
dspread <- diff(X_t,1)
plot(dspread)
adf <- adfTest_valid(dspread,24, type="nc")
# Il n’a pas été nécessaire d’inclure des retards dans le test ADF (test DF simple).
adf
x <- dspread
par(mfrow=c(1,2))
acf(x);pacf(x)
# Test racine unitaire sur le logarithme de la série
# Test de Dickey-Fuller
adf <- adfTest(X_t, lag=0, type="ct")
adf
# Test racine unitaire sur le logarithme de la série
# Test de Dickey-Fuller
adf <- adfTest(X_t, lag=7, type="ct")
adf
# Test racine unitaire sur le logarithme de la série
# Test de Dickey-Fuller
adf <- adfTest(X_t, lag=6, type="ct")
adf
#setwd(path_romain)
setwd(path_maxime)
getwd()
datafile <- "valeurs_mensuelles.csv"
data <- read.csv(datafile, sep=";")
data
# Packages séries temporelles
require(zoo)
require(tseries)
require(fUnitRoots)
typeof(data$Dates) # integer
dates_char <- as.character(data$Dates)
typeof(dates_char) # character
dates_char[1];dates_char[length(dates_char)]
dates <- as.yearmon(seq(from=2011+1/12,to=2019+2/12,by=1/12))
X_t <- zoo(data$Indice,order.by=dates)
typeof(data$X_t)
typeof(X_t)
# plot de la série
# chercher une tendance ou saisonalité
par(mfrow = c(1,2))
plot(X_t, xlab = "Années", ylab = "Indice brut de la production industrielle")
acf(X_t, main = "")
lt <- lm(X_t ~ dates) # régression du log de la série sur les dates
summary(lt)
lt <- lm(X_t ~ dates) # régression du log de la série sur les dates
summary(lt)
dates
# résidus de la régression de la série sur les dates
# série corigée
Z_t <- lt$residuals
acf(Z_t, main = ""); pacf(Z_t, main = "")
# Test racine unitaire sur le logarithme de la série
# Test de Dickey-Fuller
adf <- adfTest(X_t, lag=6, type="ct")
adf
# function test d'auto-corrélation
Qtests <- function(series, k, fitdf=0) {
pvals <- apply(matrix(1:k), 1, FUN=function(l) {
pval <- if (l<=fitdf) NA else Box.test(series, lag=l, type="Ljung-Box", fitdf=fitdf)$p.value
return(c("lag"=l,"pval"=pval))
})
return(t(pvals))
}
Qtests(adf@test$lm$residuals, 24,length(adf@test$lm$coefficients))
# L’absence d’autocorrélation des résidus est rejetéee au moins une fois (Q(4) à Q(9)), le test ADF avec aucun retard n’est donc pas valide.
# Ajoutons des retards de ∆Xt jusqu’à ce que les résidus ne soient plus autocorrélée.
adfTest_valid <- function(series,kmax,type){
k <- 0
noautocorr <- 0
while (noautocorr==0) {
cat(paste0("ADF with ",k, " lags: residuals OK? "))
adf <- adfTest(series,lags=k,type=type)
pvals <- Qtests(adf@test$lm$residuals,24,fitdf=length(adf@test$lm$coefficients))[,2]
if (sum(pvals<0.05,na.rm=T) == 0) {
noautocorr <- 1; cat("OK \n")}
else cat("nope \n")
k <- k + 1}
return(adf)
}
# Puis
adf <- adfTest_valid(X_t,24,"ct")
# Il a fallu considérer 8 retards au test ADF pour supprimer l’autocorrélation des résidus.
adf
dspread <- diff(X_t,1)
plot(dspread)
adf <- adfTest_valid(dspread,24, type="nc")
# Il n’a pas été nécessaire d’inclure des retards dans le test ADF (test DF simple).
adf
# Test racine unitaire sur le logarithme de la série
# Test de Dickey-Fuller
adf <- adfTest(X_t, lag=6, type="ct")
# Puis
adf <- adfTest_valid(X_t,24,"ct")
# Il a fallu considérer 8 retards au test ADF pour supprimer l’autocorrélation des résidus.
adf
dspread <- diff(X_t,1)
plot(dspread)
adf <- adfTest_valid(dspread,24, type="nc")
adfTest(dspread,lag=7,type = "nc")
adfTest(dspread,lag=7,type = "nc")
X_t <- zoo(data$Indice,order.by=dates)
typeof(data$X_t)
typeof(X_t)
# plot de la série
# chercher une tendance ou saisonalité
par(mfrow = c(1,2))
plot(X_t, xlab = "Années", ylab = "Indice brut de la production industrielle")
acf(X_t, main = "")
# plot du logarithme de la série
W_t = log(X_t)
plot(W_t, xlab = "Années", ylab = "Logarithme de l'indice")
acf(W_t, main = "")
lt <- lm(X_t ~ dates) # régression du log de la série sur les dates
summary(lt)
dates
# résidus de la régression de la série sur les dates
# série corigée
Z_t <- lt$residuals
acf(Z_t, main = ""); pacf(Z_t, main = "")
# Test racine unitaire sur le logarithme de la série
# Test de Dickey-Fuller
adf <- adfTest(X_t, lag=6, type="ct")
adf
# Test racine unitaire sur le logarithme de la série
# Test de Dickey-Fuller
adf <- adfTest(X_t, lag=0, type="ct")
adf
# function test d'auto-corrélation
Qtests <- function(series, k, fitdf=0) {
pvals <- apply(matrix(1:k), 1, FUN=function(l) {
pval <- if (l<=fitdf) NA else Box.test(series, lag=l, type="Ljung-Box", fitdf=fitdf)$p.value
return(c("lag"=l,"pval"=pval))
})
return(t(pvals))
}
Qtests(adf@test$lm$residuals, 24,length(adf@test$lm$coefficients))
# L’absence d’autocorrélation des résidus est rejetéee au moins une fois (Q(4) à Q(9)), le test ADF avec aucun retard n’est donc pas valide.
# Ajoutons des retards de ∆Xt jusqu’à ce que les résidus ne soient plus autocorrélée.
adfTest_valid <- function(series,kmax,type){
k <- 0
noautocorr <- 0
while (noautocorr==0) {
cat(paste0("ADF with ",k, " lags: residuals OK? "))
adf <- adfTest(series,lags=k,type=type)
pvals <- Qtests(adf@test$lm$residuals,24,fitdf=length(adf@test$lm$coefficients))[,2]
if (sum(pvals<0.05,na.rm=T) == 0) {
noautocorr <- 1; cat("OK \n")}
else cat("nope \n")
k <- k + 1}
return(adf)
}
# Puis
adf <- adfTest_valid(X_t,24,"ct")
# Il a fallu considérer 8 retards au test ADF pour supprimer l’autocorrélation des résidus.
adf
x <- dspread
par(mfrow=c(1,2))
acf(x);pacf(x)
# Test de Phillips-Perron
pp.test(X_t)
# Test de Phillips-Perron
pp.test(dspread)
# résidus de la régression de la série sur les dates
# série corigée
Z_t <- lt$residuals
acf(Z_t, main = ""); pacf(Z_t, main = "")
plot(Z_t)
# Découvrir les valeurs de p* et q*
acf(Z_t); pacf(Z_t)
# plots avant et après la transformation de la série
plot(X_t, xlab = "Années", ylab = expression(X[t])) ; plot(Z_t, xlab = "Années", ylab = expression(Z[t]))
# plot du logarithme de la série
W_t = log(X_t)
plot(W_t, xlab = "Années", ylab = "Logarithme de l'indice")
acf(W_t, main = "")
# plots avant et après la transformation de la série
plot(X_t, xlab = "Années", ylab = expression(X[t])) ; plot(Z_t, xlab = "Années", ylab = expression(Z[t]))
plot(X_t, xlab = "Années", ylab = expression(X[t])) ; plot(Z_t, xlab = "Années", ylab = expression(Z[t]))
# résidus de la régression de la série sur les dates
# série corigée
Z_t <- lt$residuals
acf(Z_t, main = ""); pacf(Z_t, main = "")
#setwd(path_romain)
setwd(path_maxime)
getwd()
datafile <- "valeurs_mensuelles.csv"
data <- read.csv(datafile, sep=";")
data
# Packages séries temporelles
require(zoo)
require(tseries)
require(fUnitRoots)
typeof(data$Dates) # integer
dates_char <- as.character(data$Dates)
typeof(dates_char) # character
dates_char[1];dates_char[length(dates_char)]
dates <- as.yearmon(seq(from=2011+1/12,to=2019+2/12,by=1/12))
X_t <- zoo(data$Indice,order.by=dates)
typeof(data$X_t)
typeof(X_t)
# plot de la série
# chercher une tendance ou saisonalité
par(mfrow = c(1,2))
plot(X_t, xlab = "Années", ylab = "Indice brut de la production industrielle")
acf(X_t, main = "")
# plot du logarithme de la série
W_t = log(X_t)
plot(W_t, xlab = "Années", ylab = "Logarithme de l'indice")
acf(W_t, main = "")
lt <- lm(X_t ~ dates) # régression de la série sur les dates
summary(lt)
dates
# résidus de la régression de la série sur les dates
# série corigée
Z_t <- lt$residuals
acf(Z_t, main = ""); pacf(Z_t, main = "")
plot(Z_t)
# plots avant et après la transformation de la série
plot(X_t, xlab = "Années", ylab = expression(X[t])) ; plot(Z_t, xlab = "Années", ylab = expression(Z[t]))
# plots avant et après la transformation de la série
plot(X_t, xlab = "Années", ylab = expression(X[t])) ; plot(Z_t, xlab = "Années", ylab = expression(Z[t]))
#path_romain <- "/Users/Romain/Documents/Romain/ENSAE 2A 2020-2021/S2/Series temporelles/Projet de series temporelles"
path_maxime <- " /Users/maximedenizan/Documents/GitHub/Series temporelles/Projet de series temporelles "
setwd(path_romain)
#setwd(path_romain)
setwd(path_maxime)
#path_romain <- "/Users/Romain/Documents/Romain/ENSAE 2A 2020-2021/S2/Series temporelles/Projet de series temporelles"
path_maxime <- " /Users/maximedenizan/Documents/GitHub/Series temporelles/Projet de series temporelles "
#setwd(path_romain)
setwd(path_maxime)
#path_romain <- "/Users/Romain/Documents/Romain/ENSAE 2A 2020-2021/S2/Series temporelles/Projet de series temporelles"
path_maxime <- " /Users/maximedenizan/Documents/GitHub/Series temporelles/Projet de series temporelles "
#path_romain <- "/Users/Romain/Documents/Romain/ENSAE 2A 2020-2021/S2/Series temporelles/Projet de series temporelles"
path_maxime <- " /Users/maximedenizan/Documents/GitHub/Projet de series temporelles "
#path_romain <- "/Users/Romain/Documents/Romain/ENSAE 2A 2020-2021/S2/Series temporelles/Projet de series temporelles"
path_maxime <- " /Users/maximedenizan/Documents/GitHub/Projet de series temporelles "
#setwd(path_romain)
setwd(path_maxime)
getwd()
#setwd(path_romain)
setwd(path_maxime)
getwd()
datafile <- "valeurs_mensuelles.csv"
data <- read.csv(datafile, sep=";")
data
# Packages séries temporelles
require(zoo)
require(tseries)
require(fUnitRoots)
typeof(data$Dates) # integer
dates_char <- as.character(data$Dates)
typeof(dates_char) # character
dates_char[1];dates_char[length(dates_char)]
dates <- as.yearmon(seq(from=2010+11/12,to=2019+3/12,by=1/12))
X_t <- zoo(data$Indice,order.by=dates)
typeof(data$X_t)
typeof(X_t)
# plot de la série
# chercher une tendance ou saisonalité
par(mfrow = c(1,2))
plot(X_t, xlab = "Années", ylab = "Indice brut de la production industrielle")
acf(X_t, main = "")
lt <- lm(X_t ~ dates) # régression du log de la série sur les dates
summary(lt)
# résidus de la régression du logarithme de la série sur les dates
# série corigée
Z_t <- lt$residuals
acf(Z_t, main = ""); pacf(Z_t, main = "")
# Test racine unitaire sur le logarithme de la série
# Test de Dickey-Fuller
adf <- adfTest(X_t, lag=0, type="ct")
adf
# fonction test d'auto-corrélation
Qtests <- function(series, k, fitdf=0) {
pvals <- apply(matrix(1:k), 1, FUN=function(l) {
pval <- if (l<=fitdf) NA else Box.test(series, lag=l, type="Ljung-Box", fitdf=fitdf)$p.value
return(c("lag"=l,"pval"=pval))
})
return(t(pvals))
}
Qtests(adf@test$lm$residuals, 24,length(adf@test$lm$coefficients))
# Puis
adf <- adfTest_valid(X_t,24,"ct")
# L’absence d’autocorrélation des résidus est rejetéee au moins une fois (Q(4) à Q(9)), le test ADF avec aucun retard n’est donc pas valide.
# Ajoutons des retards de ∆Xt jusqu’à ce que les résidus ne soient plus autocorrélés.
adfTest_valid <- function(series,kmax,type){
k <- 0
noautocorr <- 0
while (noautocorr==0) {
cat(paste0("ADF with ",k, " lags: residuals OK? "))
adf <- adfTest(series,lags=k,type=type)
pvals <- Qtests(adf@test$lm$residuals,24,fitdf=length(adf@test$lm$coefficients))[,2]
if (sum(pvals<0.05,na.rm=T) == 0) {
noautocorr <- 1; cat("OK \n")}
else cat("nope \n")
k <- k + 1}
return(adf)
}
# Puis
adf <- adfTest_valid(X_t,24,"ct")
# Test racine unitaire sur le logarithme de la série
# Test de Dickey-Fuller
adf <- adfTest(X_t, lag=0, type="ct")
adf
# Test racine unitaire sur le logarithme de la série
# Test de Dickey-Fuller
adf <- adfTest(Z_t, lag=0, type="ct")
adf
return(t(pvals))
Qtests(adf@test$lt$residuals, 24,length(adf@test$lm$coefficients))
Qtests(adf@test$lt$residuals, 24,length(adf@test$lm$coefficients))
Qtests(adf@test$lm$residuals, 24,length(adf@test$lm$coefficients))
# L’absence d’autocorrélation des résidus est rejetéee au moins une fois (Q(4) à Q(9)), le test ADF avec aucun retard n’est donc pas valide.
# Ajoutons des retards de ∆Xt jusqu’à ce que les résidus ne soient plus autocorrélés.
adfTest_valid <- function(series,kmax,type){
k <- 0
noautocorr <- 0
while (noautocorr==0) {
cat(paste0("ADF with ",k, " lags: residuals OK? "))
adf <- adfTest(series,lags=k,type=type)
pvals <- Qtests(adf@test$lm$residuals,24,fitdf=length(adf@test$lm$coefficients))[,2]
if (sum(pvals<0.05,na.rm=T) == 0) {
noautocorr <- 1; cat("OK \n")}
else cat("nope \n")
k <- k + 1}
return(adf)
}
# Puis
adf <- adfTest_valid(X_t,24,"ct")
